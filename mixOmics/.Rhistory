xaringan:::inf_mr()
breast.TCGA
str(breast.TCGA)
sapply(breast.TCGA, ncol)
rapply(breast.TCGA, ncol)
rapply(breast.TCGA$data.train, ncol)
rapply(breast.TCGA$data.train, dim)
lapply(breast.TCGA$data.train, dim)
addmargins(table(breast.TCGA$data.train$subtype))
?pca
pcs <- lapply(breast.TCGA$data.train, function(i) pca(i))
lapply(breast.TCGA$data.train, dim)
J <- length(breast.TCGA$data.train)-1
pcs <- lapply(breast.TCGA$data.train[1:J], function(i) pca(i))
lapply(pcs,
plotIndiv)
names(breast.TCGA$data.train)
?plotIndiv
J <- length(breast.TCGA$data.train)-1
pcs <- lapply(breast.TCGA$data.train[1:J], pca)
mapply(function(pca, dataset){
plotIndiv(pca, title=dataset)
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
?plotIndiv
plotIndiv(pca, title=dataset, color=breast.TCGA$data.train, style="graphics")
mapply(function(pca, dataset){
plotIndiv(pca, title=dataset, color=breast.TCGA$data.train, style="graphics")
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
mapply(function(pca, dataset){
plotIndiv(pca, title=dataset, group=breast.TCGA$data.train, style="graphics")
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
mapply(function(pca, dataset){
plotIndiv(pca, title=dataset, group=breast.TCGA$data.train, style="graphics")
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
plotIndiv(pca, title=dataset, group=breast.TCGA$data.train$subtype, style="graphics")
mapply(function(pca, dataset){
plotIndiv(pca, title=dataset, group=breast.TCGA$data.train$subtype, style="graphics")
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
par(mfrow = c(1, 3))
mapply(function(pca, dataset){
plotIndiv(pca,
title=dataset,
group=breast.TCGA$data.train$subtype,
style="graphics")
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
plotIndiv(pca,
title=dataset,
group=breast.TCGA$data.train$subtype,
style="graphics",
legend=TRUE)
mapply(function(pca, dataset){
plotIndiv(pca,
title=dataset,
group=breast.TCGA$data.train$subtype,
style="graphics",
legend=TRUE)
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
install.packages("xaringanExtra")
xaringan:::inf_mr()
xaringan:::inf_mr()
J <- length(breast.TCGA$data.train)-1
pcs <- lapply(breast.TCGA$data.train[1:J], pca)
mapply(function(pca, dataset){
plotIndiv(pca,
title=dataset,
group=breast.TCGA$data.train$subtype,
style="graphics",
legend=TRUE)
}, pca=pcs, dataset=names(breast.TCGA$data.train)[1:J])
?perf
splsda_mrna <- splsda(X = breast.TCGA$data.train$mrna,
Y = breast.TCGA$data.train$subtype,
keepX = c(5, 5),
ncomp = 2)
perf <- perf(splsda_mrna, validation = "Mfold", folds = 5, nrepeat = 5)
plot(perf)
splsda_mrna <- splsda(X = breast.TCGA$data.train$mrna,
Y = breast.TCGA$data.train$subtype,
keepX = c(5, 5),
ncomp = 2)
perf <- perf(splsda_mrna, validation = "Mfold", folds = 5, nrepeat = 5)
plot(perf)
perf
auc(perf)
perf$error.rate
splsda_mirna <- splsda(X = breast.TCGA$data.train$mirna,
Y = breast.TCGA$data.train$subtype,
keepX = c(5, 5),
ncomp = 2)
perf_mirna <- perf(splsda_mirna, validation = "Mfold", folds = 5, nrepeat = 5)
perf$error.rate
splsda_mrna <- splsda(X = breast.TCGA$data.train$mrna,
Y = breast.TCGA$data.train$subtype,
keepX = c(5, 5),
ncomp = 2)
perf_mrna <- perf(splsda_mrna, validation = "Mfold", folds = 5, nrepeat = 5)
perf$error.rate
perf_mrna$error.rate
perf_mirna$error.rate
?test
?predict
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE)
mrna_model <- splsda(X = breast.TCGA$data.train$mrna,
Y = breast.TCGA$data.train$subtype,
keepX = c(5, 5),
ncomp = 2)
mrna_perf <- perf(mrna_model, validation = "Mfold", folds = 5, nrepeat = 5)
mrna_perf$error.rate
mirna_model <- splsda(X = breast.TCGA$data.train$mirna,
Y = breast.TCGA$data.train$subtype,
keepX = c(5, 5),
ncomp = 2)
mirna_perf <- perf(mirna_model, validation = "Mfold", folds = 5, nrepeat = 5)
mirna_perf$error.rate
mrna_pred <- predict(mrna_model, newdata = breast.TCGA$data.train$mrna)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE)
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2)
text(mrna_pred$variates[, 1], mrna_pred$variates[, 2],
c("new ind.1", "new ind.2"), pos = 3)
mrna_model <- splsda(X = breast.TCGA$data.train$mrna,
Y = breast.TCGA$data.train$subtype,
keepX = c(5, 5),
ncomp = 2)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, group = breast.TCGA$data.train$subtype)
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2)
text(mrna_pred$variates[, 1], mrna_pred$variates[, 2],
c("new ind.1", "new ind.2"), pos = 3)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, group = breast.TCGA$data.train$subtype)
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2)
text(mrna_pred$variates[, 1], mrna_pred$variates[, 2],
c("new ind.1", "new ind.2"), pos = 3)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE)
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2)
text(mrna_pred$variates[, 1], mrna_pred$variates[, 2],
c("new ind.1", "new ind.2"), pos = 3)
?plotIndiv
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, col="white")
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, col=rep("white", 3)
)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, size=0)
plotIndiv
getAnywhere(plotIndiv)
methods(plotIndiv)
getAnywhere(plotIndiv.mixo.pls)
getAnywhere(plotIndiv.mixo_pls)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0.1)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0.1)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0)
as.mix(1:3)
as.mixo(1:3)
mixOmics::color.mixo(1:3)
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, color=mixOmics::color.mixo(1:3))
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0)
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(1:3))
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0)
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
mrna_pred <- predict(mrna_model, newdata = breast.TCGA$data.train$mrna)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title="mrna")
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
v
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title="mrna")
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
mrna_pred <- predict(mrna_model, newdata = breast.TCGA$data.test$mrna)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title="mrna")
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
mrna_pred <- predict(mrna_model, newdata = breast.TCGA$data.test$mrna)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title="mrna")
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
table(mrna_pred <- predict(mrna_model, newdata = breast.TCGA$data.test$mrna)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title="mrna")
mrna_pred <- predict(mrna_model, newdata = breast.TCGA$data.test$mrna)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title="mrna")
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.test$subtype)))
mirna_pred <- predict(mrna_model, newdata = breast.TCGA$data.test$mirna)
mirna_pred <- predict(mirna_model, newdata = breast.TCGA$data.test$mirna)
plotIndiv(mirna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title="mirna")
points(mirna_pred$variates[, 1], mirna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.test$subtype)))
?predict
mrna_pred$class
mrna_pred$class$max.dist[, "comp2"]
breast.TCGA$data.test$subtype
table(mrna_pred$class$max.dist[, "comp2"], breast.TCGA$data.test$subtype)
diag(conf_matrix)/colSums(conf_matrix)
conf_matrix <- table(mrna_pred$class$max.dist[, "comp2"], breast.TCGA$data.test$subtype)
diag(conf_matrix)/colSums(conf_matrix)
1-diag(conf_matrix)/colSums(conf_matrix)
conf_matrix <- table(mirna_pred$class$max.dist[, "comp2"], breast.TCGA$data.test$subtype)
1-diag(conf_matrix)/colSums(conf_matrix)
xaringan:::inf_mr()
calc_err(mrna_pred$class$max.dist[, "comp2"], breast.TCGA$data.test$subtype)
calc_err = function(pred, truth, dist="max.dist"){
conf_matrix <- table(pred$class[["max.dist"]][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
mean(err)
}
calc_err(mrna_pred$class$max.dist[, "comp2"], breast.TCGA$data.test$subtype)
conf_matrix <- table(pred$class["max.dist"][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
mean(err)
calc_err = function(pred, truth, dist="max.dist"){
conf_matrix <- table(pred$class["max.dist"][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
mean(err)
}
calc_err(mrna_pred$class$max.dist[, "comp2"], breast.TCGA$data.test$subtype)
mrna_pred$class['max.dist']
mrna_pred$class[['max.dist']]
conf_matrix <- table(pred$class[["max.dist"]][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
mean(err)
calc_err = function(pred, truth, dist="max.dist"){
conf_matrix <- table(pred$class[["max.dist"]][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
mean(err)
}
calc_err(mrna_pred$class$max.dist[, "comp2"], breast.TCGA$data.test$subtype)
calc_err(mrna_pred, breast.TCGA$data.test$subtype)
signif(100*mean(err), 1)
calc_err = function(pred, truth, dist="max.dist"){
conf_matrix <- table(pred$class[["max.dist"]][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
signif(100*mean(err), 1)
}
calc_err(mrna_pred, breast.TCGA$data.test$subtype)
signif(100*mean(err), 3)
calc_err = function(pred, truth, dist="max.dist"){
conf_matrix <- table(pred$class[["max.dist"]][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
signif(100*mean(err), 3)
}
calc_err(mrna_pred, breast.TCGA$data.test$subtype)
signif(mean(err), 3)
calc_err = function(pred, truth, dist="max.dist"){
conf_matrix <- table(pred$class[["max.dist"]][, "comp2"],
truth)
err <- 1-diag(conf_matrix)/colSums(conf_matrix)
signif(mean(err), 3)
}
calc_err(mrna_pred, breast.TCGA$data.test$subtype)
cim(mrna_pred)
plot(mrna_pred)
plotVar(mrna_pred)
plotLoadings(mrna_pred)
cim(mrna_model)
plot(mrna_model)
plotLoadings(mrna_model)
selectVar(mrna_model)
network(mrna_model)
cim(mrna_model)
heatmap(mrna_model)
?selectVar
selectVar(mrna_model, comp1)
selectVar(mrna_model, comp = 1)
selectVar(mrna_model, comp = 1:2)$name
c(selectVar(mrna_model, comp = 1)$name, selectVar(mrna_model, comp = 2)$name)
vars <- c(selectVar(mrna_model, comp = 1)$name, selectVar(mrna_model, comp = 2)$name)
dim(breast.TCGA$data.train$mrna)
heatmap(breast.TCGA$data.train$mrna[, vars])
cim(breast.TCGA$data.train$mrna[, vars])
hist(breast.TCGA$data.train$mrna[, vars])
plot(breast.TCGA$data.train$mrna[, vars])
heatmap(breast.TCGA$data.train$mrna[, vars])
aheatmap(breast.TCGA$data.train$mrna[, vars])
NMF::aheatmap(breast.TCGA$data.train$mrna[, vars])
pheatmap(breast.TCGA$data.train$mrna[, vars])
cim(breast.TCGA$data.train$mrna[, vars])
?cim
cim(breast.TCGA$data.train$mrna[, vars], center = FALSE, scale = FALSE)
cim(breast.TCGA$data.train$mrna[, vars], center = FALSE, scale = FALSE)
cim(breast.TCGA$data.train$mrna[, vars])
cim
?cim
cim(breast.TCGA$data.train$mrna[, vars])
breast.TCGA$data.train$mrna[, vars]
heatmap.2(breast.TCGA$data.train$mrna[, vars])
cim(breast.TCGA$data.train$mrna[, vars])
cim(scale(breast.TCGA$data.train$mrna[, vars]))
heatmap(scale(breast.TCGA$data.train$mrna[, vars]))
X <- scale(breast.TCGA$data.train$mrna[, vars])
X[which(X < -2)] <- -2
X[which(X > 2)] <- 2
cim(X)
X <- scale(breast.TCGA$data.train$mrna[, vars])
X[which(X < -2)] <- -2
X[which(X > 2)] <- 2
cim(X, row.sideColors = mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
cim(mrna_model)
cim(mrna_model, row.sideColors = mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
heatmap(mrna_model)
?plotLoadings
xaringan:::inf_mr()
cor(mrna_model)
cor(pcs)
pcs
names(pcs)
plotVar(mrna_model)
selectVar(mrna_model, comp=1)
selectVar(mrna_model, comp=1)$names
selectVar(mrna_model, comp=1)$name
?cim
cim(mrna_model,
legend = TRUE,
row.sideColors = mixOmics::color.mixo(as.numeric(breast.TCGA$data.train$subtype)))
aucroc(mrna_perf)
?tune
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=2, nrepeat=2,
test.keepX = c(5, 10, 15), folds=5, dist="max.dist",
progressBar = TRUE)
plot(tune_mrna)
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=2, nrepeat=2,
test.keepX = c(5, 10, 15, 30, 100), folds=5, dist="max.dist",
progressBar = TRUE)
plot(tune_mrna)
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=5, nrepeat=2,
test.keepX = c(5, 10, 15, 30, 100), folds=5, dist="max.dist",
progressBar = FALSE)
plot(tune_mrna)
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=1:3, nrepeat=2,
test.keepX = c(5, 10, 15, 30, 100), folds=5, dist="max.dist",
progressBar = FALSE)
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=1:3, nrepeat=3,
test.keepX = c(5, 10, 15, 30, 100), folds=5, dist="max.dist",
progressBar = FALSE)
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=1:3, nrepeat=5,
test.keepX = c(5, 10, 15, 30, 100), folds=5, dist="max.dist",
progressBar = FALSE)
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=3, nrepeat=5,
test.keepX = c(5, 10, 15, 30, 100), folds=5, dist="max.dist",
progressBar = FALSE)
plot(tune_mrna)
DIM(breast.TCGA$data.train$mrna)
dim(breast.TCGA$data.train$mrna)
tune_mrna = tune(method = "splsda", X = breast.TCGA$data.train$mrna,
Y=breast.TCGA$data.train$subtype, ncomp=3, nrepeat=5,
test.keepX = c(5, 10, 15, 30, 100, 200), folds=5, dist="max.dist",
progressBar = FALSE)
plot(tune_mrna)
?tune
tune_mirna = tune(method = "splsda", X = breast.TCGA$data.train$mirna,
Y=breast.TCGA$data.train$subtype, ncomp=2, nrepeat=5,
test.keepX = c(5, 10, 15, 30, 100, 200), folds=5, dist="max.dist",
progressBar = FALSE)
plot(tune_mirna)
tune_mirna = tune(method = "splsda", X = breast.TCGA$data.train$mirna,
Y=breast.TCGA$data.train$subtype, ncomp=3, nrepeat=5,
test.keepX = c(5, 10, 15, 30, 100, 200), folds=5, dist="max.dist",
progressBar = FALSE)
plot(tune_mirna)
plot(tune_mrna)
tune_mirna = tune(method = "splsda", X = breast.TCGA$data.train$mirna,
Y=breast.TCGA$data.train$subtype, ncomp=3, nrepeat=5,
test.keepX = c(5, 10, 15, 30, 100, 200), folds=5, dist="max.dist",
progressBar = FALSE)
plot(tune_mirna)
mrna_model <- splsda(X = breast.TCGA$data.train$mrna,
Y = breast.TCGA$data.train$subtype,
keepX = rep(5, 3),
ncomp = 3)
mrna_pred <- predict(mrna_model, newdata = breast.TCGA$data.test$mrna)
plotIndiv(mrna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title=paste0("mrna, BER=", calc_err(mrna_pred, breast.TCGA$data.test$subtype)))
points(mrna_pred$variates[, 1], mrna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.test$subtype)))
mirna_model <- splsda(X = breast.TCGA$data.train$mirna,
Y = breast.TCGA$data.train$subtype,
keepX = rep(5, 3),
ncomp = 3)
mirna_pred <- predict(mirna_model, newdata = breast.TCGA$data.test$mirna)
plotIndiv(mirna_model, comp = 1:2, rep.space = "X-variate", style="graphics", ind.names=FALSE, ellipse = TRUE, cex=0, title=paste0("mIrna, BER=", calc_err(mirna_pred, breast.TCGA$data.test$subtype)))
points(mirna_pred$variates[, 1], mirna_pred$variates[, 2], pch = 19, cex = 1.2, col=mixOmics::color.mixo(as.numeric(breast.TCGA$data.test$subtype)))
list.keepX <- list(mirna = rep(5, 3), mrna = rep(5, 3), protein = rep(5, 3))
diablo <- block.splsda(X = breast.TCGA$data.train[1:3],
Y = breast.TCGA$data.train$subtype,
keepX=list.keepX)
list.keepX <- list(mrna = rep(5, 3), mirna = rep(5, 3), protein = rep(5, 3))
diablo <- block.splsda(X = breast.TCGA$data.train[1:3],
Y = breast.TCGA$data.train$subtype,
keepX=list.keepX)
rep(5, 3)
ncomp = 3
list.keepX <- list(mrna = rep(5, ncomp), mirna = rep(5, ncomp), protein = rep(5, ncomp))
diablo <- block.splsda(X = breast.TCGA$data.train[1:3],
Y = breast.TCGA$data.train$subtype,
keepX=list.keepX,
ncomp = ncomp)
plotDiablo(diablo, ncomp = 1)
plotIndiv(diablo)
plotVar(diablo, var.names = c(TRUE, TRUE, TRUE),
legend=TRUE, pch=c(16,16,1))
cimDiablo(diablo, color.blocks = c('darkorchid', 'brown1', 'lightgreen'),
comp = 1, margin=c(8,20), legend.position = "right")
network(diablo, blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
cutoff = 0.6)
network(diablo, blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
cutoff = 0.5)
set.seed(123) # for reproducibility in this vignette
perf_diablo <- perf(diablo, validation = 'Mfold', folds = 5,
nrepeat = 3,
dist = 'centroids.dist')
plot(perf_diablo)
auroc(diablo, roc.block = "mrna", roc.comp = 2)
auroc(mrna_panel)
auroc(mrna_model)
?auroc
perf_diablo <- perf(diablo, validation = 'Mfold', folds = 5,
nrepeat = 3)
plot(perf_diablo)
?tune
data = list(mrna = breast.TCGA$data.train$mrna, mirna = breast.TCGA$data.train$mirna,
protein = breast.TCGA$data.train$protein)
# set up a full design where every block is connected
# could also consider other weights, see our mixOmics manuscript
design = matrix(1, ncol = length(data), nrow = length(data),
dimnames = list(names(data), names(data)))
diag(design) =  0
design
# set number of component per data set
ncomp = 3
## setup cluster - use SnowParam() on Widnows
BPPARAM <- BiocParallel::MulticoreParam(workers = parallel::detectCores()-1)
tune <- tune.block.splsda(
X = data,
Y = Y,
ncomp = ncomp,
test.keepX = test.keepX,
design = design,
nrepeat = 2,
BPPARAM = BPPARAM
)
tune <- tune.block.splsda(
X = data,
Y = breast.TCGA$data.train$subtype,
ncomp = ncomp,
test.keepX = test.keepX,
design = design,
nrepeat = 2,
BPPARAM = BPPARAM
)
data = list(mrna = breast.TCGA$data.train$mrna, mirna = breast.TCGA$data.train$mirna,
protein = breast.TCGA$data.train$protein)
# set up a full design where every block is connected
# could also consider other weights, see our mixOmics manuscript
design = matrix(1, ncol = length(data), nrow = length(data),
dimnames = list(names(data), names(data)))
diag(design) =  0
design
# set number of component per data set
ncomp = 3
test.keepX = list(mrna = c(10, 30), mirna = c(15, 25), protein = c(4, 8))
## setup cluster - use SnowParam() on Widnows
BPPARAM <- BiocParallel::MulticoreParam(workers = parallel::detectCores()-1)
tune <- tune.block.splsda(
X = data,
Y = breast.TCGA$data.train$subtype,
ncomp = ncomp,
test.keepX = test.keepX,
design = design,
nrepeat = 2,
BPPARAM = BPPARAM
)
tune
plot(tune)
tune$choice.ncomp
tune$choice.keepX
tune$choice.keepX
tune$choice.ncomp
tune$choice.keepX
length(tune$choice.keepX$mrna)
knit_with_parameters("~/Documents/cbl/pi/teaching/2023/UF/mixOmics/slides/slides.Rmd")
list.files()
list.files("slides")
library(renderthis)
install.packages("renderthis")
list.files()
renderthis::to_pdf("slides/slides.Rmd")
remotes::install_github('rstudio/chromote')
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
network(diablo, blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
cutoff = 0.5)
network(diablo, blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
cutoff = 0.7)
network(diablo, blocks = c(1,2,3),
color.node = c('darkorchid', 'brown1', 'lightgreen'),
cutoff = 0.75)
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
renderthis::to_pdf("slides/slides.Rmd")
